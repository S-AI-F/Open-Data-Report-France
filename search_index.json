[
["index.html", "Open Data book Chapter 1 Présentation 1.1 Cas d’usages 1.2 Méthode 1.3 Organisation du rapport", " Open Data book Saif Shabou 2020-07-21 Chapter 1 Présentation L’objectif de ce rapport consiste à introduire “OpenGeoKPI”: un outil qui permet de centraliser, croiser et aggréger différentes données géo-spatiales qui permettent de caractériser et qualifier le territoire. OpenGeoKPI est une API qui fournit aux ustilisateurs les différentes données qui caractérisent un lieu donnée (à différentes échelles et concernant différentes thématiques) en se basant sur l’open data et des traitements de standardisation, de normalisation, nettoyage et aggrégation de ces donnnées. Un portail de géovisualisation de ces indicateurs est aussi disponible afin d’explorer ces indicateurs et qui permet de générer rapidement des cartes thématiques. 1.1 Cas d’usages En centralisant les donnnées géo-spatiales dans une seule plateforme, OpenGeoKPI peut répondre aux besoins de différents acteurs de l’aménagement de territoire, de la planification urbaine et de développement immobilier. Agences immobilières: Caractérisr les biens immobiliers mis en ventes ou en location en fonction de leurs emplacements (accessibilité en transport, distance par rapport aux équipements, socio-démographie de la popluation du quartier, qualité environnementale…) Collectivités territoriales: Avoir un accés simple et unique aux différentes données qui qualifient le territoire en terme de logements, population, équipements, espaces verts, transport… Promoteurs et développeurs immobiliers: OpenGeoKPI permet aux développeurs foncier de mieux évaluer les terrains et les biens immobiliers en fonction des caractéristiques socio-spatiales liées à leurs emplacements géographiques. Particuliers: L’outil de géovisualisation des indicateurs fournit pas OpenGeoKPI peut être utilisé comme un système d’aide à l’aide à la décision pour les particuliers qui cherchent à habiter dans un nouveau quartier et qui aimeraient avoir accès à des cartes intéractifs qui permettent d’évaluer les lieux en fonction des critères personnalisés. 1.2 Méthode Lister et cartographier les différentes données brutes disponibles en accès libre et les organiser en fonction des thématiques Explorer les données collectées et appliquer des traitements de normalisation, standardisation et netooyage si nécessaiire Aggréger les données consolidées et calculer des indicateurs à différentes échelles spatiales Construction d’une base de données géo-spatiales qui stocke les dfférents indicateurs calculés Développer un outil de visualisation de ces indicateurs Développer une API qui permet de fournir ces indicateurs à différentes échelles 1.3 Organisation du rapport Ce rapport est constitué de x sections: La première section introduit les démarches d’ouverture des données et décrit les principaux organismes qui perticipent à la publication des données dans différentes thématiques La deuxième section s’intéresse aux données liées aux questions d’aménagement urbain. On essaiera d’explorer le contenu de ces données et de proposer des indicateurs clés agrégés à l’échelle d’une grille régulière du territoire. La troisième section s’intéresse aux données liées au domaine du tranport. On essaiera d’explorer le contenu de ces données et de proposer des indicateurs clés agrégés à l’échelle d’une grille régulière du territoire. La quatrième section s’intéresse aux données liées à l’immobilier et au développement foncier. On essaiera d’explorer le contenu de ces données et de proposer des indicateurs clés agrégés à l’échelle d’une grille régulière du territoire. "],
["les-données-ouvertes-en-france.html", "Chapter 2 Les données ouvertes en France 2.1 Les données ouvertes 2.2 Les démarches d’ouverture des données en France 2.3 Sources par thématiques 2.4 Agrégation des données", " Chapter 2 Les données ouvertes en France 2.1 Les données ouvertes L’ouverture des données est un mouvement qui est apparu il y a au moins 10 ans en s’inspirant des principes de développement Open Source (ouverture du code informatique). Pour définir l’open data, il faut se reférer à la définition plus large du contenu ouvert proposée par l’Open Knwoledge Foundation qui peut se résumer comme suit: “Open means anyone can freely accesss, use, modify, and share for any purpose”. On peut retrouver la définition complète ici. Neufs critères ont été fixés pour que les données soients considérées comme ouvertes: prmaires: les données ouvertes sont publiées telles qu’elles sont collectées à la source (brutes, non aggrégées, niveau de granularité le plus fin possible). fraiches: les données doivent être disponibles dès qu’elles sont produites accesibles: les données doivent être accessibles et utilisables par le plus grand nombre d’usagers possiblme. lisibles par les machines: les données être traitées automatiquement par des machines non discriminatoires: les données peuvent être utilisées par tous les potentiels usages sans la nécessité d’un enregistrement format ouvert: le format des données ne doit pas être la propriété d’une organisation particulière license ouverte: les données doivent être placées dans le domaine public 2.2 Les démarches d’ouverture des données en France Les démarches d’open data se développent de plus en plus vite au niveau des collectivités. Ce mouvement a été accéléré avec la promulgation de la loi République Numérique qui incite les différentes collectivités locales (communes, EPCI, départements et régions) à publier leurs données. Pour celà, ils ont été accompagnés par plusieurs dispositifs publics (OpenDataLocale, Vlidata…) ainsi qu’une implication du secteur privé en matière de conseil, formation, mise à disposition de plateformes de publication et d’exploitation… Cette politique d’ouverture des données est pilotée par la mission Etalab. Rapport intéressant: https://datactivist.coop/ardeche/rapport/partie1.html 2.2.1 Organismes publics 2.2.1.1 Opendata france Opendata Frace est une association créée en 2013 à Toulouse et a pour but de regrouper et soutenir les collectivités engagés activement dans une démarche d’ouverture des données publiques. Les actions de cette association consistent en: - Accompagner et aider les collectivités à lancer ou dévélopper leurs projets opendata - Animer des rencontres ou des ateliers permettant aux participants de progrsser dans leur démarche d’ouverture des données - Communiquer autour de l’opendata 2.2.1.2 Opendata locale Opendata France a été missionnée pour soutenir les petites et moyennes communes dans leur démarche d’ouvertue des données dans le cadre du projet Opendata Locale. Ceci a permis de produire des supports méthodologiques, pédagogiques et techniques qui permettent d’assurer la mutualisation des connaissances et l’harmonisation et normalisation des données. 2.2.1.3 Observatoire de l’Opendata OpendataFrance a mis en place un observatoire de l’open data dans les territoires pour connaitre et comprendre l’avancement dees démarches d’ouverture des données publiques dans les territoires: http://www.observatoire-opendata.fr/ Les données sont collectées majoritairement de manière automatique. L’observatoire propose aussi des indicateurs qui permettent de quantifier et qualifier l’opendata publiée. Il permet ainsi d’évaluer en continu l’ouverture des données dans les collectivités territoriales. Il produit des restitutions sous diférents formats: documents de synthèse eta analyse, outils de visualisation interactive et les bases de données brutes. Ce projet a été élaboré en partenariat avec la Caisse des Dépôts et Etalab. 2.2.1.4 Etalab Etalab Fait partie de la Direction interministérielle du numérique de l’Etat. Sa mission consiste en la coordination, la conception et mise en oeuvre de la stratégie de l’état dans le domaine de la donnée. Il coordonne la politique d’ouverture et de partage des données publiques. Il développe et anime la plateforme d’open data data.gouv.fr destinée à rassembler et à mettre à disposition librement l’ensemble des informations publiques de l’Etat, de ses établissments publics, les collectivités territoriales… Etalab contribue ) la promotion des sciences des données et de l’intelligence artificielle dans la sphère publique. Fing 2.2.1.5 Ademe https://data.ademe.fr/ 2.2.1.6 INSEE https://www.insee.fr/fr/information/4246567 2.2.1.7 IGN https://apicarto.ign.fr/ - https://geoservices.ign.fr/documentation/diffusion/telechargement-donnees-libres.html#geofla Open data paris: https://opendata.paris.fr/page/home/ https://datafrance.info/ https://data.grandparissud.fr/pages/accueil/ 2.2.2 Entreprises https://www.geofoncier.fr/ https://www.eea.europa.eu/ opendatasoft APUR: https://www.apur.org/fr/geo-data/donnees-mises-ligne-2019 https://geocatalogue.apur.org/catalogue/srv/fre/catalog.search;jsessionid=node0q83batqexj5lzrl54n9hbpg719646.node0#/home Institut Paris Région: https://data-iau-idf.opendata.arcgis.com/ 2.3 Sources par thématiques Nous allons respecter la catgéorisation des thématiques proposée par data.gouv: Agriculture et alimentaire https://agreste.agriculture.gouv.fr/agreste-web/disaron/GraFraChap1.2/detail/ https://agreste.agriculture.gouv.fr/agreste-web/disaron/GraFraIntegral/detail/ Culture, Communication Comptes, économie et emploi Education, recheche, formation International, europe Environnement, énergie, logement santé et social société, droit, institutions Territoires, Transports, Tourisme Urbanisme Transports Foncier Tourisme 2.4 Agrégation des données Afin de croiser différents indicateurs géospatiaux à l’échelle de la france, nous avons choisi de générer une grille régulière du territoire français et aggréger les différentes données collectées à l’échelle de cette grille. Afin de pouvoir démontrer plus facilement un prototype, nous proposons dans un premier temps un prototype à l’échelle de Paris. 2.4.1 Extraction des limites administratives # limites régionales regions &lt;- rgdal::readOGR(dsn = &quot;data/FrenchOpenData/territoires/limites administratives/regions-20180101-shp&quot;, layer = &quot;regions-20180101&quot;, use_iconv = TRUE, encoding=&quot;UTF-8&quot;) ## OGR data source with driver: ESRI Shapefile ## Source: &quot;D:\\OpenGeoKPI\\OpenDataBook-France\\data\\FrenchOpenData\\territoires\\limites administratives\\regions-20180101-shp&quot;, layer: &quot;regions-20180101&quot; ## with 18 features ## It has 5 fields # limites départementales departements &lt;- rgdal::readOGR(&quot;data/FrenchOpenData/territoires/limites administratives/contours-simplifies-des-departements-francais-2015.geojson&quot;, use_iconv = TRUE, encoding=&quot;UTF-8&quot;) ## OGR data source with driver: GeoJSON ## Source: &quot;D:\\OpenGeoKPI\\OpenDataBook-France\\data\\FrenchOpenData\\territoires\\limites administratives\\contours-simplifies-des-departements-francais-2015.geojson&quot;, layer: &quot;contours-simplifies-des-departements-francais-2015&quot; ## with 101 features ## It has 12 fields, of which 1 list fields # extraire les limites des départements appartenant à la région ile de france departements_idf = departements[departements$code_reg == &quot;11&quot;, ] # extraire les limites du département de Paris departements_paris = departements_idf[departements_idf$code_dept == &quot;75&quot;, ] 2.4.2 Génération d’une grille à l’échelle de Paris library(sf) library(raster) # définir la granularité r &lt;- raster(ncol=20, nrow=12) # définir l&#39;étendu extent(r) &lt;- extent(departements_paris) # rasterizer le département de paris departements_paris_ras&lt;- rasterize(departements_paris, r, &quot;nom_dept&quot;) # plot pour voir ce que ça donne sp::plot(departements_paris_ras, border = grey(0.6)) ## Extract polygons departements_paris_ras_poly &lt;- raster::rasterToPolygons(departements_paris_ras) # Add polygons id departements_paris_ras_poly$cell_ID = 1:nrow(departements_paris_ras_poly@data) # plot pour voir ce que ça donne sp::plot(departements_paris_ras_poly, border = grey(0.6)) # get the centroids and then convert them to a SpatialPointsDataFrame library(rgeos) departements_paris_ras_poly_centroid &lt;- SpatialPointsDataFrame(gCentroid(departements_paris_ras_poly, byid=TRUE), departements_paris_ras_poly@data, match.ID=FALSE) departements_paris_ras_poly_centroid$centroid_lng = coordinates(departements_paris_ras_poly_centroid)[,&quot;x&quot;] departements_paris_ras_poly_centroid$centroid_lat = coordinates(departements_paris_ras_poly_centroid)[,&quot;y&quot;] "],
["urbanisme.html", "Chapter 3 Urbanisme 3.1 Plan Cadastre 3.2 Plan Local d’Urbanisme (PLU)", " Chapter 3 Urbanisme 3.1 Plan Cadastre Le plan cadastral est le découpage du territoire français en unités de surfaces permettant le calcul de certains impôts. Chaque commune est divisée en sections et les sections sont divisées en feuilles. Une feuille cadastrale contient des parcelles qui peuvent supporter des bâtiments. 3.1.1 Le Plan Cadastre Informatisé PCI Le plan cadastral est un asemblage d’environ 600 000 feuilles représentant chacune une section ou une partie d’une section cadastrale. Le PCI existe sous la forme de deux produits complémentaires: Le PCI vecteur qui regroupe les feuilles qui ont été numérisées et couve l’essentiel du territoire (4 181 communes sur un total de 35 200) et le PCI image qui regroupe les feuilles qui n’ont été que scannées et complète la couverture. Les données du PCI sont disponibles dans plusieurs formats: Format EDIGEO et format DXF. Les données sont mises à disposition de deux manières: en téléchargement direct à la feuille ou via un outil en ligne pour les archives communales. La documentation complète et les liens de téléchargement des données sont disponible via cette page de datagouv. 3.1.2 Le Plan Cadastre simplifié Le plan Cadastre simplifié est produit par Etalab et se concentre sur le découpage parcellaire et les bâtiments. Cette version du plan cadastre est disponible dans des formats de données géographiques usuels (geojson et shapefile) ce qui rend son utilisation plus simple. Le téléchargement se fait par couche, et à différentes échelles (France entière, département et commune) via cete page. 3.1.3 Exploration des données Nous avons téléchargé les données du plan cadastre simplifié fournies par Etalab pour explorer rapidement le contenu. # load department data (code depratemnt = 75) cadastre_75_communes &lt;- rgdal::readOGR(&quot;data/FrenchOpenData/territoires/cadastre/dept-75/cadastre-75-communes.json&quot;) ## OGR data source with driver: GeoJSON ## Source: &quot;D:\\OpenGeoKPI\\OpenDataBook-France\\data\\FrenchOpenData\\territoires\\cadastre\\dept-75\\cadastre-75-communes.json&quot;, layer: &quot;cadastre-75-communes&quot; ## with 20 features ## It has 4 fields head(cadastre_75_communes@data) ## id nom created updated ## 0 75101 PARIS 01 2006/11/28 2019/06/06 ## 1 75102 PARIS 02 2007/01/24 2018/12/27 ## 2 75104 PARIS 04 2007/01/30 2016/01/05 ## 3 75105 PARIS 05 2006/08/30 2019/10/14 ## 4 75109 PARIS 09 2007/01/30 2018/10/25 ## 5 75107 PARIS 07 2007/10/29 2015/12/07 # nombre de communes length(unique(cadastre_75_communes@data$nom)) ## [1] 20 # load communes data (code commune 75112): feuilles cadastre_75112_feuilles &lt;- rgdal::readOGR(&quot;data/FrenchOpenData/territoires/cadastre/dept-75/comm-75012/cadastre-75112-feuilles.json&quot;) ## OGR data source with driver: GeoJSON ## Source: &quot;D:\\OpenGeoKPI\\OpenDataBook-France\\data\\FrenchOpenData\\territoires\\cadastre\\dept-75\\comm-75012\\cadastre-75112-feuilles.json&quot;, layer: &quot;cadastre-75112-feuilles&quot; ## with 108 features ## It has 10 fields head(cadastre_75112_feuilles@data) ## id commune prefixe section numero qualite modeConfection echelle ## 0 75112000AA01 75112 000 AA 01 03 01 500 ## 1 75112000AB01 75112 000 AB 01 03 01 500 ## 2 75112000AC01 75112 000 AC 01 03 01 500 ## 3 75112000AD01 75112 000 AD 01 03 01 500 ## 4 75112000AE01 75112 000 AE 01 03 01 500 ## 5 75112000AH01 75112 000 AH 01 03 01 500 ## created updated ## 0 2007/10/08 2018/03/28 ## 1 2007/10/19 2019/06/24 ## 2 2007/10/09 2017/06/20 ## 3 2007/10/08 2019/03/08 ## 4 2007/10/09 2019/07/08 ## 5 2011/03/09 2019/03/08 # nombre de feuilles length(unique(cadastre_75_communes@data$nom)) ## [1] 20 # load communes data (code commune 75112): sections cadastre_75112_sections &lt;- rgdal::readOGR(&quot;data/FrenchOpenData/territoires/cadastre/dept-75/comm-75012/cadastre-75112-sections.json&quot;) ## OGR data source with driver: GeoJSON ## Source: &quot;D:\\OpenGeoKPI\\OpenDataBook-France\\data\\FrenchOpenData\\territoires\\cadastre\\dept-75\\comm-75012\\cadastre-75112-sections.json&quot;, layer: &quot;cadastre-75112-sections&quot; ## with 108 features ## It has 6 fields head(cadastre_75112_sections@data) ## id commune prefixe code created updated ## 0 75112000AA 75112 000 AA 2007/10/08 2014/02/12 ## 1 75112000AB 75112 000 AB 2007/10/19 2014/02/12 ## 2 75112000AC 75112 000 AC 2007/10/09 2014/02/12 ## 3 75112000AD 75112 000 AD 2007/10/08 2014/02/12 ## 4 75112000AE 75112 000 AE 2007/10/09 2014/02/12 ## 5 75112000AH 75112 000 AH 2007/10/08 2014/02/12 # Nombre de sections length(unique(cadastre_75112_sections@data$code)) ## [1] 108 Ci-dessous une géo-visualisation intéractive des limites géographiques des communes et des sections: library(leaflet) library(leaflet.providers) leaflet() %&gt;% addTiles() %&gt;% addProviderTiles(&quot;OpenStreetMap.France&quot;, group = &quot;OSM.France&quot;) %&gt;% addProviderTiles(providers$GeoportailFrance.parcels, group = &quot;GeoportailFrance.parcels&quot;) %&gt;% addProviderTiles(providers$CartoDB.DarkMatter , group = &quot;CartoDB&quot;) %&gt;% # Add communes addPolygons(data = cadastre_75_communes, group = &quot;communes&quot;, stroke = TRUE, color = &quot;black&quot;, weight = 3,dashArray = &quot;3&quot;, smoothFactor = 0.3, fill = TRUE, fillOpacity = 0.2, highlight = highlightOptions( weight = 5, color = &quot;#666&quot;, dashArray = &quot;&quot;, fillOpacity = 0.3, bringToFront = TRUE), label = cadastre_75_communes@data$nom, labelOptions = labelOptions( style = list(&quot;font-weight&quot; = &quot;normal&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;15px&quot;, direction = &quot;auto&quot;)) %&gt;% # Add sections addPolygons(data = cadastre_75112_sections, group = &quot;sections&quot;, stroke = TRUE, color = &quot;blue&quot;, weight = 2,dashArray = &quot;3&quot;, smoothFactor = 0.3, fill = TRUE, fillOpacity = 0.2, highlight = highlightOptions( weight = 5, color = &quot;#666&quot;, dashArray = &quot;&quot;, fillOpacity = 0.3, bringToFront = TRUE), label = cadastre_75112_sections@data$code, labelOptions = labelOptions( style = list(&quot;font-weight&quot; = &quot;normal&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;15px&quot;, direction = &quot;auto&quot;)) %&gt;% # Layers control addLayersControl( baseGroups = c(&quot;OSM.France&quot;, &quot;GeoportailFrance.parcels&quot;,&quot;CartoDB&quot;), overlayGroups = c(&quot;communes&quot;, &quot;sections&quot;), options = layersControlOptions(collapsed = FALSE) ) Maintenant, nous allons explorer le contenu des données du plan cadastre à l’échelle de parcelles et de bâtiments en foncalisant sur la commune du 75112. # load communes data (code commune 75112): parcelles cadastre_75112_parcelles &lt;- rgdal::readOGR(&quot;data/FrenchOpenData/territoires/cadastre/dept-75/comm-75012/cadastre-75112-parcelles.json&quot;) ## OGR data source with driver: GeoJSON ## Source: &quot;D:\\OpenGeoKPI\\OpenDataBook-France\\data\\FrenchOpenData\\territoires\\cadastre\\dept-75\\comm-75012\\cadastre-75112-parcelles.json&quot;, layer: &quot;cadastre-75112-parcelles&quot; ## with 3980 features ## It has 9 fields head(cadastre_75112_parcelles@data) ## id commune prefixe section numero contenance arpente created ## 0 75112000AA0036 75112 000 AA 36 2313 0 2007/10/08 ## 1 75112000AA0029 75112 000 AA 29 2755 0 2007/10/08 ## 2 75112000AA0072 75112 000 AA 72 902 0 2007/10/08 ## 3 75112000AA0033 75112 000 AA 33 2469 0 2007/10/08 ## 4 75112000AA0044 75112 000 AA 44 1270 0 2007/10/08 ## 5 75112000AA0035 75112 000 AA 35 1038 0 2007/10/08 ## updated ## 0 2016/07/21 ## 1 2016/07/21 ## 2 2016/07/21 ## 3 2016/07/21 ## 4 2016/07/21 ## 5 2016/07/21 # Nombre de parcelles length(unique(cadastre_75112_parcelles@data$numero)) ## [1] 225 # load communes data (code commune 75112): bâtiments cadastre_75112_batiments &lt;- rgdal::readOGR(&quot;data/FrenchOpenData/territoires/cadastre/dept-75/comm-75012/cadastre-75112-batiments.json&quot;) ## OGR data source with driver: GeoJSON ## Source: &quot;D:\\OpenGeoKPI\\OpenDataBook-France\\data\\FrenchOpenData\\territoires\\cadastre\\dept-75\\comm-75012\\cadastre-75112-batiments.json&quot;, layer: &quot;cadastre-75112-batiments&quot; ## with 6278 features ## It has 5 fields head(cadastre_75112_batiments@data) ## type nom commune created updated ## 0 01 &lt;NA&gt; 75112 2007/10/08 2014/02/12 ## 1 01 &lt;NA&gt; 75112 2007/10/08 2014/02/12 ## 2 01 &lt;NA&gt; 75112 2007/10/08 2014/02/12 ## 3 01 Ecole 75112 2008/02/08 2014/02/12 ## 4 01 &lt;NA&gt; 75112 2007/10/08 2014/02/12 ## 5 01 &lt;NA&gt; 75112 2007/10/08 2014/02/12 # Nombre de bâtiments nrow(cadastre_75112_batiments@data) ## [1] 6278 Ci-dessous une géo-visualisation intéractive des limites géographiques des parcelles et des bâtiments: leaflet() %&gt;% addTiles() %&gt;% addProviderTiles(&quot;OpenStreetMap.France&quot;, group = &quot;OSM.France&quot;) %&gt;% addProviderTiles(providers$GeoportailFrance.parcels, group = &quot;GeoportailFrance.parcels&quot;) %&gt;% addProviderTiles(providers$CartoDB.DarkMatter , group = &quot;CartoDB&quot;) %&gt;% # Add parcelles addPolygons(data = cadastre_75112_parcelles, group = &quot;Parcelles&quot;, stroke = TRUE, color = &quot;black&quot;, weight = 2,dashArray = &quot;3&quot;, smoothFactor = 0.3, fill = TRUE, fillOpacity = 0.6, highlight = highlightOptions( weight = 5, color = &quot;#666&quot;, dashArray = &quot;&quot;, fillOpacity = 0.3, bringToFront = TRUE), label = cadastre_75112_parcelles@data$numero, labelOptions = labelOptions( style = list(&quot;font-weight&quot; = &quot;normal&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;15px&quot;, direction = &quot;auto&quot;)) %&gt;% # Add sections addPolygons(data = cadastre_75112_batiments, group = &quot;Bâtiments&quot;, stroke = TRUE, color = &quot;blue&quot;, weight = 1,dashArray = &quot;3&quot;, smoothFactor = 0.3, fill = TRUE, fillOpacity = 0.2, highlight = highlightOptions( weight = 5, color = &quot;#666&quot;, dashArray = &quot;&quot;, fillOpacity = 0.3, bringToFront = TRUE), label = cadastre_75112_batiments@data$nom, labelOptions = labelOptions( style = list(&quot;font-weight&quot; = &quot;normal&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;15px&quot;, direction = &quot;auto&quot;)) %&gt;% # Layers control addLayersControl( baseGroups = c(&quot;OSM.France&quot;, &quot;GeoportailFrance.parcels&quot;,&quot;CartoDB&quot;), overlayGroups = c(&quot;Parcelles&quot;, &quot;Bâtiments&quot;), options = layersControlOptions(collapsed = FALSE) ) 3.2 Plan Local d’Urbanisme (PLU) En France, le plan local d’urbanisme (PLU), ou le plan local d’urbanisme intercommunal (PLUI), est le principal document de planification de l’urbanisme au niveau communal ou intercommunal. Il replace le plan d’occupation des sols. Il comporte, comme un schéma directeur, des orientations sur l’évolution de la ville à l’horizon de 10 à 15 ans. Le PLU est un document réglementaire: il régit l’évolution des parcelles à travers l’instruction des permis de constuire et de démolir. Il contient les documents suivants: Le rapport de présentation qui qui décrit un diagnostic et une analyse de l’état initial de l’environnement Le Projet d’Aménagement et de Développement DUrable (PADD) qui expose le projet des élus en matière d’aménagement et d’urbanisme. Les documents graphiques qui délimitent les différentes zones: U: Zones urbaines AU: Zones à urbaniser A: zones agricoles N: zones naturelles et forestières Le réglement qui fixe les différentes règles applicables à l’intérieur de chaque zone Le PLU peut être consulté depuis le géoportail de l’urbanisme et les données peuvent être téléchargées depuis le site data.gouv. Pour certaines communes, les informations concernant le PLU sont consultables à travers une application web de géo-visualisation comme (PLU de Paris.) Nous avons téléchargé le plan de zonage du PLU de Paris sous format geojson à partir de cette page. Le fichier contient les dilimitations géographiques des différentes zones en fonction de leurs attributs: N (zone naturelle et forestière), UG (zone urbaine générale), UGSU (zone urbaine de grands services urbains) et UV (Zone Urbaine verte). # load paris plu data plu_paris &lt;- rgdal::readOGR(&quot;data/FrenchOpenData/territoires/plu/plu-plan-de-zonage.geojson&quot;) ## OGR data source with driver: GeoJSON ## Source: &quot;D:\\OpenGeoKPI\\OpenDataBook-France\\data\\FrenchOpenData\\territoires\\plu\\plu-plan-de-zonage.geojson&quot;, layer: &quot;plu-plan-de-zonage&quot; ## with 1039 features ## It has 6 fields, of which 1 list fields # compter le nombre de zones par type table(plu_paris@data$zone) ## ## N PSMV7 PSMVM SENAT UG UGSU UV ## 2 2 2 1 28 134 870 Ci-dessous une géo-visualisation intéractive du plan de zonage de paris avec des filtres sur les types de zone leaflet() %&gt;% addTiles() %&gt;% addProviderTiles(&quot;OpenStreetMap.France&quot;, group = &quot;OSM.France&quot;) %&gt;% addProviderTiles(providers$GeoportailFrance.parcels, group = &quot;GeoportailFrance.parcels&quot;) %&gt;% addProviderTiles(providers$CartoDB.DarkMatter , group = &quot;CartoDB&quot;) %&gt;% # Zones: UV addPolygons(data = plu_paris[plu_paris@data$zone == &quot;UV&quot;, ], group = &quot;UV&quot;, stroke = TRUE, color = &quot;red&quot;, weight = 1,dashArray = &quot;3&quot;, smoothFactor = 0.3, fill = TRUE, fillOpacity = 0.4, highlight = highlightOptions( weight = 5, color = &quot;#666&quot;, dashArray = &quot;&quot;, fillOpacity = 0.3, bringToFront = TRUE), label = plu_paris@data[plu_paris@data$zone == &quot;UV&quot;, &quot;numardt&quot;], labelOptions = labelOptions( style = list(&quot;font-weight&quot; = &quot;normal&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;15px&quot;, direction = &quot;auto&quot;)) %&gt;% # Zones UG addPolygons(data = plu_paris[plu_paris@data$zone == &quot;UG&quot;, ], group = &quot;UG&quot;, stroke = TRUE, color = &quot;blue&quot;, weight = 1,dashArray = &quot;1&quot;, smoothFactor = 0.3, fill = TRUE, fillOpacity = 0.2, highlight = highlightOptions( weight = 5, color = &quot;#666&quot;, dashArray = &quot;&quot;, fillOpacity = 0.3, bringToFront = TRUE), label = plu_paris@data[plu_paris@data$zone == &quot;UG&quot;, &quot;numardt&quot;], labelOptions = labelOptions( style = list(&quot;font-weight&quot; = &quot;normal&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;15px&quot;, direction = &quot;auto&quot;)) %&gt;% # Zones N addPolygons(data = plu_paris[plu_paris@data$zone == &quot;N&quot;, ], group = &quot;N&quot;, stroke = TRUE, color = &quot;green&quot;, weight = 2,dashArray = &quot;1&quot;, smoothFactor = 0.3, fill = TRUE, fillOpacity = 0.4, highlight = highlightOptions( weight = 5, color = &quot;#666&quot;, dashArray = &quot;&quot;, fillOpacity = 0.3, bringToFront = TRUE), label = plu_paris@data[plu_paris@data$zone == &quot;N&quot;, &quot;numardt&quot;], labelOptions = labelOptions( style = list(&quot;font-weight&quot; = &quot;normal&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;15px&quot;, direction = &quot;auto&quot;)) %&gt;% # Zones UGSU addPolygons(data = plu_paris[plu_paris@data$zone == &quot;UGSU&quot;, ], group = &quot;UGSU&quot;, stroke = TRUE, color = &quot;darkorange2&quot;, weight = 1,dashArray = &quot;1&quot;, smoothFactor = 0.3, fill = TRUE, fillOpacity = 0.5, highlight = highlightOptions( weight = 5, color = &quot;#666&quot;, dashArray = &quot;&quot;, fillOpacity = 0.3, bringToFront = TRUE), label = plu_paris@data[plu_paris@data$zone == &quot;UGSU&quot;, &quot;numardt&quot;], labelOptions = labelOptions( style = list(&quot;font-weight&quot; = &quot;normal&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;15px&quot;, direction = &quot;auto&quot;)) %&gt;% # Layers control addLayersControl( baseGroups = c(&quot;OSM.France&quot;, &quot;GeoportailFrance.parcels&quot;,&quot;CartoDB&quot;), overlayGroups = c(&quot;UV&quot;,&quot;UG&quot;,&quot;N&quot;,&quot;UGSU&quot;), options = layersControlOptions(collapsed = FALSE) ) "],
["transport.html", "Chapter 4 Transport 4.1 La plateforme transport.data.gouv 4.2 Formats des dononées de transport 4.3 Données disponibles 4.4 Exploration des données du réseau TGV SNCF", " Chapter 4 Transport 4.1 La plateforme transport.data.gouv Les données de transport sont centralisées dans la plateforme transport.data.gouv qui rassemble les données de toute l’offre de mobilité à travers la France. Les autorités organisatrices de la mobilité (AOM), les opérateurs de transport et les fournisseurs de services de mobilité, ainsi que les gestionnaires d’infrastructures sont tenus de mettre à disposition, par l’intermédiaire de cette plateforme numérique, les données de leurs services et réseaux qui sont nécessaires à l’information des voyageurs. En avril 2020, le PAN héberge les données d’horaires théoriques de transport en commun de 200 autorités organisatrices de la mobilité sur 337 et 12 régions sur 18, couvrant 79% de la population bénéficiant d’un réseau de transport local. Les statistiques de déploiement de la plateforme sont disponible via ce lien. Le Point d’Accès National (PAN) est destiné aux producteurs de données (collectivités territoriales, entreprises de transport…) et aux réutilisateurs de données (développeurs, applications de calcul d’itinéraire, services d’information…). Les usagers en bénificient de manière indirecte grâce à ces services d’information sur les déplacements. Les données peuvent être téléchargées gratuitement depuis la plateforme et exploitées librement dans le respect de la license OBdL. 4.2 Formats des dononées de transport GTFS (General Transit Feed Specifications): c’est un format informatique standardisé pour communiquer des horaires de transports en commun et les informations géographiques associées (emplacement des arrêts, tracé des lignes…). Les données sont codées dasn plusieurs fichiers: agency, calendar, routes, stops, trips, stop_times, transfers, shapes, frequencies. NEPTUNE: NEPTUNE (Norme d’Échange Profil Transport collectif utilisant la Normalisation Européenne) est le format de référence en France pour l’échange de données d’offre théorique de transport collectif (TC). Un fichier NEPTUNE est un fichier texte .xml. Chaque fichier NEPTUNE (.xml) correspond à la description d’une ligne du réseau de transport. En général, un réseau de transport étant caractérisé par plusieurs lignes de transport, on dispose alors d’un ensemble de fichier .xml regroupés dans un .ZIP. NeTEx: NeTEx (Network Exchange) est un format de référence pour échanger des données d’offre théorique du transport collectif, défini au niveau européen. NeTEx couvre un périmètre fonctionnel plus large que NEPTUNE et GTFS. En plus de définir des règles communes pour travailler sur l’information voyageurs, NeTEx s’intéresse également aux informations utiles pour l’exploitation des transports collectifs. GTFS - Real Time: En complément du format GTFS de description de l’offre théorique, Google propose une extension pour le temps réel : GTFS-realtime (GTFS-RT). SIRI: Il s’agit d’un protocole d’échange XML issu d’une spécification technique européenne. Cet acronyme signifie Service Interface for Realtime Information. 4.3 Données disponibles La plateforme transport.data.gouv propose un large panel de données de transport catégorisées en différentes thématiques et couvrant différentes couvertures spatiales. Le tableau ci-dessous décrit un échantillon de ces données. Thématique Jeu de données Description Fournisseur Horaires transports en commun SNCF TER (National) Horaires des lignes TER au format GTFS. Ces horaires sont les horaires théoriques mis à jour tous les jours. SNCF Horaires transports en commun Reseau TGV SNCF (National) Horaires des trains de SNCF Voyages (TGV/inOui/Ouigo) au format GTFS. Ces horaires sont les horaires théoriques mis à jour tous les jours. SNCF Horaires transports en commun Ouibus (National) Liste des arrêts, horaires, et parcours du réseau BlaBlaBus/Ouibus au format GTFS. Ouibus Horaires transports en commun Eurolines (National) Liste des arrêts, horaires, et parcours du réseau Eurolines / Isilines au format GTFS Eurolines Temps réel transports en commun Réseau GPSO (National) Horaires théoriques au format GTFS et horaires temps-réel au format GTFS-RT du réseau GPSO. GPSO Autocars longue distance FlixBus (National) Fichier horaire de l’ensemble du réseau Européen Flixbus. FlixBus Vélos en libre service Levélo (Marseille) Les données sont disponibles au format GBFS et permettent de connaitre la liste des stations (géolocalisation, nom, adresse, identifiant) et l’état des stations (nombre de vélos disponibles et emplacements libres) JCDecaux Lieux de covoiturage Base nationale consolidée des lieux de covoiturage Identification et signalétique des lieux de prise en charge en covoiturage ou intermodalité pour homogénéiser la description des zones de rencontre, favoriser leur usage et avoir un meilleur maillage. roulezmalin, Ouihop, covoiturage-libre, blablacar… Bornes de recharges de véhicules électriques IRVE (National) les données relatives à la localisation géographique et aux caractéristiques techniques des stations et des points de recharge de véhicules électriques Stations Tesla, Métropoles, concessions… Données aériennes Air France KLM Il s’agit de la présentation d’une semaine représentative du programme d’Air France et de KLM sur toutes les lignes opérées ou vendues en partage de code (marketing) par le groupe Air France KLM Air France, KLM, HOP, Transavia… Réseaux routiers ROUTE 500 C’est la base de données routières décrivant 500 000 km de routes du réseau classé (autoroutes, nationales, départementales) et des éléments d’habillage à des échelles nationales et régionales. IGN Adresses Base Adresse Nationale (BAN) C’est une base de données qui a pour but de référencer l’intégralité des adresses du territoire français. Elle contient la position géographique de plus de 24 millions d’adresses. IGN, ETALAB, INSEE Stationnement hors voirie Base nationale des lieux de stationnement Elle permet de regrouper en un unique fichier consolidé l’ensemble de l’offre de stationnement en France, dans un format standard et unifié. transport.data.gouv.fr 4.4 Exploration des données du réseau TGV SNCF Nous avons téléchargé les données des transport en commun pour les réseaux TGV et TER disponibles au format gtfs. Le fichier continet 6 datasets qui permettent de caractériser l’offre de transport. La figure ci-dessous décrit la structure des données GTFS et les jointures qui permettent de combiner les différents fichiers: Structure des données GTFS (source:https://rstudio-pubs-static.s3.amazonaws.com/234589_8188f8d6471f412b94dbc61f7b1aaa16.html) library(tidyverse) library(dplyr) library(ggplot2) # list GTFS files of TGV data list.files(&quot;data/FrenchOpenData/territoires/transport/export_gtfs_voyages/&quot;) ## [1] &quot;agency.txt&quot; &quot;calendar.txt&quot; &quot;calendar_dates.txt&quot; ## [4] &quot;routes.txt&quot; &quot;stop_times.txt&quot; &quot;stops.txt&quot; ## [7] &quot;transfers.txt&quot; &quot;trips.txt&quot; # read files of TGV data routes_tgv = read_csv(&quot;data/FrenchOpenData/territoires/transport/export_gtfs_voyages/routes.txt&quot;,trim_ws = T) stops_tgv = read_csv(&quot;data/FrenchOpenData/territoires/transport/export_gtfs_voyages/stops.txt&quot;,trim_ws = T) trips_tgv = read_csv(&quot;data/FrenchOpenData/territoires/transport/export_gtfs_voyages/trips.txt&quot;,trim_ws = T) transfers_tgv = read_csv(&quot;data/FrenchOpenData/territoires/transport/export_gtfs_voyages/transfers.txt&quot;,trim_ws = T) agency_tgv = read_csv(&quot;data/FrenchOpenData/territoires/transport/export_gtfs_voyages/agency.txt&quot;,trim_ws = T) stoptime_tgv = read_csv(&quot;data/FrenchOpenData/territoires/transport/export_gtfs_voyages/stop_times.txt&quot;,trim_ws = T) # read stops file of TER data stops_ter = read_csv(&quot;data/FrenchOpenData/territoires/transport/export-ter-gtfs-last/stops.txt&quot;,trim_ws = T) library(knitr) kable(head(routes_tgv)) route_id agency_id route_short_name route_long_name route_desc route_type route_url route_color route_text_color OCE137 OCESN NA AQUITAINE NA 2 NA NA NA OCE1209972 OCESN NA Paris&lt;&gt;Strasbourg/Alsace Allemagne NA 2 NA NA NA OCE39 OCESN NA BRETAGNE NA 2 NA NA NA OCESN-87391003-87671008 OCESN NA Paris-Montparnasse 1-2 - Tarbes NA 2 NA NA NA OCE40 OCESN NA PAYS DE LOIRE NA 2 NA NA NA OCE150 OCESN NA Paris &lt;&gt; Languedoc-Roussillon NA 2 NA NA NA kable(head(stops_tgv)) stop_id stop_name stop_desc stop_lat stop_lon zone_id stop_url location_type parent_station StopArea:OCE87391003 Gare de Paris-Montparnasse 1-2 NA 48.84063 2.3198944 NA NA 1 NA StopArea:OCE87583005 Gare de Angoulême NA 45.65393 0.1645285 NA NA 1 NA StopArea:OCE87581009 Gare de Bordeaux-St-Jean NA 44.82654 -0.5561941 NA NA 1 NA StopArea:OCE87582478 Gare de Biganos-Facture NA 44.63748 -0.9660205 NA NA 1 NA StopArea:OCE87582643 Gare de La Teste NA 44.63696 -1.1429787 NA NA 1 NA StopArea:OCE87582668 Gare de Arcachon NA 44.65892 -1.1653684 NA NA 1 NA kable(head(trips_tgv)) route_id service_id trip_id trip_headsign direction_id block_id shape_id OCE137 7539 OCESN008473F1801823167 8473 1 NA NA OCE137 12261 OCESN008479F0400412668 8479 1 NA NA OCE137 1241 OCESN008477F0500512295 8477 1 NA NA OCE137 1524 OCESN008477F0600612296 8477 1 NA NA OCE137 472 OCESN008471F040043773 8471 1 NA NA OCE137 12262 OCESN008479F04004~TGA50095 8479 1 NA NA Nous proposons une visualisation des différents arrêts des réseaux de transport TGV et TER à l’échalle natinale. # remove wrong stops location stops_tgv_clean = stops_tgv[!(stops_tgv$stop_lat == 0 |stops_tgv$stop_lon == 0), ] stops_ter_clean = stops_ter[!(stops_ter$stop_lat &lt; 40), ] # plot library(leaflet) library(leaflet.providers) m = leaflet() %&gt;% # Add CartoDB background map addProviderTiles(&quot;CartoDB.DarkMatter&quot;) %&gt;% # Add a marker for each tgv stop addCircleMarkers(lng= ~ stop_lon, lat= ~stop_lat, data = stops_tgv_clean, group = &quot;TGV stops&quot;, stroke = FALSE, fillOpacity = 0.5, radius =5, label = stops_tgv_clean$stop_name, labelOptions = labelOptions( style = list(&quot;font-weight&quot; = &quot;normal&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;15px&quot;, direction = &quot;auto&quot;)) %&gt;% # Add a marker for each stop addCircleMarkers(lng= ~ stop_lon, lat= ~stop_lat, data = stops_ter_clean, group = &quot;TER stops&quot;, stroke = FALSE, fillOpacity = 0.5, radius =2, color = &quot;green&quot;, label = stops_ter_clean$stop_name, labelOptions = labelOptions( style = list(&quot;font-weight&quot; = &quot;normal&quot;, padding = &quot;3px 8px&quot;), textsize = &quot;15px&quot;, direction = &quot;auto&quot;)) %&gt;% # Layers control addLayersControl( overlayGroups = c(&quot;TGV stops&quot;, &quot;TER stops&quot;), options = layersControlOptions(collapsed = FALSE) ) m # Show the map "],
["foncier.html", "Chapter 5 Foncier", " Chapter 5 Foncier # load data dvf = read.csv2(&quot;data/FrenchOpenData/territoires/foncier/full.csv&quot;, sep = &quot;,&quot;) # process coordinates dvf$longitude = as.numeric(as.character(dvf$longitude)) dvf$latitude = as.numeric(as.character(dvf$latitude)) # sample dvf_sample = sample_n(dvf, 100) # plot library(leaflet) library(leaflet.providers) m = leaflet() %&gt;% # Add CartoDB background map addProviderTiles(&quot;CartoDB.DarkMatter&quot;) %&gt;% # Add a marker for each stop addCircleMarkers(lng= ~ longitude, lat= ~latitude, data = dvf_sample, stroke = FALSE, fillOpacity = 0.5, radius =2, popup = paste(&quot;Adresse nom de voie:&quot;, dvf_sample$adresse_nom_voie, &quot;&lt;br&gt;&quot;, &quot;Date mutation:&quot;, dvf_sample$date_mutation, &quot;&lt;br&gt;&quot;, &quot;Valeur foncière:&quot;, dvf_sample$valeur_fonciere, &quot;&lt;br&gt;&quot;, &quot;Type:&quot;, dvf_sample$type_local, &quot;&lt;br&gt;&quot;)) m # Show the map "],
["references.html", "References", " References https://cengel.github.io/R-spatial/ https://www.r-spatial.org/ https://keen-swartz-3146c4.netlify.app/ https://geocompr.robinlovelace.net/ "]
]
